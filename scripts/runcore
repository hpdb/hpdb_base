#!/usr/bin/env python
# -*- coding: utf-8 -*-
# To stop pipeline, create a file named stopcore at /home/hpdb/

from __future__ import division
import os
import time
import sys
import yaml
import commands

sys.path.insert(1, os.environ['HPDB_BASE'] + '/scripts/tools')
import hpdb, blast, clustalo, roary, snippy

def forcedelete(file):
    while os.path.isfile(file):
        os.remove(file)

def run():    
    # ----- Get job from queue -----
    files = sorted(os.listdir(os.environ['HPDB_BASE'] + '/queue'))
    if len(files) == 0:
        return False
    
    jobid = files[0]
    job_queue_file = os.environ['HPDB_BASE'] + '/queue/' + jobid
    with open(job_queue_file, 'r') as f:
        job_dir = f.read()
    
    # Check if job really exists
    if not os.path.isdir(job_dir):
        os.remove(job_queue_file)
        return True # return True to continue getting job from queue
    
    with open('running', 'w') as f:
        f.write('dumb file')
    
    # ----- Load job config -----    
    os.chdir(job_dir)
    with open('configs.yaml', 'r') as f:
        configs = yaml.full_load(f)
    
    if configs['jobtype'] == 'hpdb':
        configs = hpdb.run(configs)
    elif configs['jobtype'] == 'blast':
        configs = blast.run(configs)
    elif configs['jobtype'] == 'clustalo':
        configs = clustalo.run(configs)
    elif configs['jobtype'] == 'roary':
        configs = roary.run(configs)
    elif configs['jobtype'] == 'snippy':
        configs = snippy.run(configs)
    
    # ----- Save job config -----
    with open('configs.yaml', 'w') as f:
        yaml.dump(configs, f)
    
    # ----- Remove job from queue -----
    forcedelete(job_queue_file)
    forcedelete('running')
    forcedelete('queued')
    
    # ----- Move back to base folder -----
    os.chdir(os.environ['HPDB_BASE'])
    
    return True

def stop_if_already_running():
    script_name = os.path.basename(__file__)
    l = commands.getstatusoutput("ps aux | grep -e '%s' | grep -v grep | awk '{print $2}'| awk '{print $2}'" % script_name)
    if l[1]:
        print('Already running. Exiting...')
        sys.exit(0);

if __name__ == '__main__':
    stop_if_already_running()
    logf = open("/home/hpdb/runcore.log", "w")
    while not os.path.isfile('/home/hpdb/stopcore'):
        try:
            if not run():
                time.sleep(2)
        except Exception as e:
            logf.write(str(e))
    logf.close()